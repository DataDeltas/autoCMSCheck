name: Post Processor - Separate Runs

on:
  workflow_dispatch:
    inputs:
      max_runs:
        description: 'Maximum number of runs'
        required: false
        default: '12000'
        type: string
      sleep_duration_seconds:
        description: 'Delay between runs in seconds'
        required: false
        default: '100'
        type: string
      duration_hours:
        description: 'Maximum duration in hours (optional, set to 0 to ignore)'
        required: false
        default: '0'
        type: string

  repository_dispatch:
    types: [trigger-next-run]

jobs:
  process-single-post:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Increased to account for processing + delay
    outputs:
      current_run: ${{ steps.session-info.outputs.current_run }}
      elapsed_minutes: ${{ steps.session-info.outputs.elapsed_minutes }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests tenacity
      timeout-minutes: 2

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Run post processor
      env:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        ROOBTECH_EMAIL: ${{ secrets.ROOBTECH_EMAIL }}
        ROOBTECH_PASSWORD: ${{ secrets.ROOBTECH_PASSWORD }}
        USER_AGENT: ${{ secrets.USER_AGENT || 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36' }}
        LOGIN_URL: ${{ vars.LOGIN_URL || 'https://roobtech.com/Account/Login' }}
        API_URL: ${{ vars.API_URL || 'https://roobtech.com/ProjectAnnotation/PostChecked' }}
        PROJECT_ID: ${{ vars.PROJECT_ID || '1e879af5-ca76-477f-a83d-e22d890ca984' }}
        REPO_NAME: ${{ vars.REPO_NAME || 'DataDeltas/qcAuto' }}
      run: |
        echo "Starting checker.py at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        python checker.py
        echo "Finished checker.py at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      timeout-minutes: 3  # Assuming checker.py takes ~2 minutes

    - name: Check if should continue and schedule next run
      id: session-info
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        SLEEP_DURATION: ${{ github.event.inputs.sleep_duration_seconds || '100' }}
      run: |
        # Validate or create session file
        if [ ! -f "session_info.txt" ]; then
          echo "$(date -u +%s)" > session_info.txt
          echo "1" >> session_info.txt
          CURRENT_RUN=1
          START_TIME=$(date -u +%s)
        else
          START_TIME=$(sed -n '1p' session_info.txt)
          CURRENT_RUN=$(sed -n '2p' session_info.txt)
          # Validate file content
          if [[ ! "$START_TIME" =~ ^[0-9]+$ ]] || [[ ! "$CURRENT_RUN" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid session_info.txt content" >&2
            exit 1
          fi
          CURRENT_RUN=$((CURRENT_RUN + 1))
        fi

        # Update session file
        echo "$START_TIME" > session_info.txt
        echo "$CURRENT_RUN" >> session_info.txt

        # Git operations with retry
        for i in {1..3}; do
          if git add session_info.txt && git commit -m "Update session - Run #$CURRENT_RUN" && git push; then
            echo "✓ Successfully updated session_info.txt"
            break
          else
            echo "⚠️ Git operation failed (attempt $i)" >&2
            if [ $i -eq 3 ]; then
              echo "Error: Failed to update session_info.txt after 3 attempts" >&2
              exit 1
            fi
            sleep $((2 ** i))
          fi
        done

        CURRENT_TIME=$(date -u +%s)
        ELAPSED=$((CURRENT_TIME - START_TIME))
        MAX_RUNS="${{ github.event.inputs.max_runs || '120' }}"
        DURATION_HOURS="${{ github.event.inputs.duration_hours || '0' }}"
        MAX_DURATION=$((DURATION_HOURS * 3600))

        echo "----------------------------------------"
        echo "Session Info:"
        echo "Run: $CURRENT_RUN of $MAX_RUNS"
        echo "Elapsed: $((ELAPSED / 60)) minutes"
        echo "Processing time per run: ~2 minutes, then ${SLEEP_DURATION}s delay"
        echo "----------------------------------------"

        # Set outputs
        echo "current_run=$CURRENT_RUN" >> $GITHUB_OUTPUT
        echo "elapsed_minutes=$((ELAPSED / 60))" >> $GITHUB_OUTPUT

        # Check for running workflows
        RUNNING_WORKFLOWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=in_progress" | \
          jq '.workflow_runs | length')
        if [ "$RUNNING_WORKFLOWS" -gt 1 ]; then
          echo "Error: Another workflow is running, aborting to prevent race conditions" >&2
          exit 1
        fi

        # Check if session should continue
        if [ "$DURATION_HOURS" -eq 0 ] || [ $ELAPSED -lt $MAX_DURATION ]; then
          if [ $CURRENT_RUN -lt $MAX_RUNS ]; then
            echo "Scheduling next run in $SLEEP_DURATION seconds..."
            sleep $SLEEP_DURATION

            # Trigger next run with retry
            for i in {1..3}; do
              RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/dispatches" \
                -d '{"event_type":"trigger-next-run"}')
              STATUS_CODE=${RESPONSE: -3}
              if [ "$STATUS_CODE" == "204" ]; then
                echo "✓ Successfully triggered next run"
                break
              else
                echo "⚠️ Failed to trigger next run (attempt $i): HTTP $STATUS_CODE" >&2
                if [ $i -eq 3 ]; then
                  echo "Error: Failed to trigger next run after 3 attempts" >&2
                  exit 1
                fi
                sleep $((2 ** i))
              fi
            done
          else
            echo "Session completed! Max runs ($MAX_RUNS) reached."
            echo "Total runs: $CURRENT_RUN"
            echo "Total time: $((ELAPSED / 60)) minutes"
            # Optionally archive session file instead of deleting
            mv session_info.txt session_info_$(date -u +%Y%m%d_%H%M%S).txt
            git add session_info_*.txt
            git commit -m "Archive session info - $CURRENT_RUN runs completed" || true
            git push || true
          fi
        else
          echo "Session completed! Max duration ($DURATION_HOURS hours) reached."
          echo "Total runs: $CURRENT_RUN"
          echo "Total time: $((ELAPSED / 60)) minutes"
          mv session_info.txt session_info_$(date -u +%Y%m%d_%H%M%S).txt
          git add session_info_*.txt
          git commit -m "Archive session info - $CURRENT_RUN runs completed" || true
          git push || true
        fi
      timeout-minutes: 3
